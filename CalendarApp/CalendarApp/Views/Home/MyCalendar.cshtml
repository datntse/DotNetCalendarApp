@using CalendarApp.Data;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> UserManager


<div class="text-center">
	<h1 class="display-4">Welcome to my Calender</h1>

	<h1 class="display-4"></h1>

	<div id="calendar"></div>
</div>
<div class="row">
	<div class="col-md-6">
		<a asp-controller="Event" asp-action="Index">Events</a>
	</div>
	<div class="col-md-6">
		<a asp-controller="Location" asp-action="Index">Locations</a>
	</div>
</div>

<div id="myModal" class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="staticBackdropLabel"><span id="eventTitle"></span></h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

			</div>
			<div class="modal-body">
				<div class="container-fluid">
					<div class="row">

						<div class="col-md-8">
							<p id="pDetails"></p>
						</div>
						<div class="col-md-4 ms-auto">
							<button id="btnDelete" class="btn btn-danger btn-sm pull-right">
								Delete
							</button>
							<button id="btnEdit" class="btn btn-warning btn-sm pull-right" style="margin-left: 5px">
								Edit
							</button>
						</div>
					</div>
				</div>

			</div>
			<div class="modal-footer">

				<button type="button" class="btn btn-primary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>





<div id="myModalSave" class="modal fade savemodal" role="dialog">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title">Save Event</h4>
				<button type="button" class="btn btn-danger">
					<a asp-controller="Event" asp-action="Create">More details</a>
				</button>
			</div>
			<div class="modal-body">
				<form class="form-horizontal" id="editForm">
					@{
						var user = await UserManager.GetUserAsync(User);
						if (user != null)
						{
							var userLoginId = await UserManager.GetUserIdAsync(user);
							// Use the userLoginId as needed in your view
							<input type="hidden" name="UserId" class="form-control" value="@userLoginId" />
						}
						else
						{
							<p>User is not logged in.</p>
						}
					}
					<input type="hidden" name="Id" id="hdEventID" value="0" />
					<div class="form-group">
						<label>Name</label>
						<input type="text" id="txtSubject" name="Name" class="form-control" />
					</div>
					<div class="form-group">
						<label>Start</label>
						<div class="input-group date" id="dtp1">
							<input type="text" id="txtStart" name="StartTime" class="form-control" />
							<span class="input-group-addon">
								<span class="glyphicon glyphicon-calendar"></span>
							</span>
						</div>
					</div>
					<div class="form-group">
						<div class="checkbox">
							<label><input type="checkbox" id="chkIsFullDay" name="isFullDay" checked="checked" /> Is Full Day event</label>
						</div>
					</div>
					<div class="form-group" id="divEndDate">
						<label>End</label>
						<div class="input-group date" id="dtp2">
							<input type="text" id="txtEnd" name="EndTime" class="form-control" />
							<span class="input-group-addon">
								<span class="glyphicon glyphicon-calendar"></span>
							</span>
						</div>
					</div>
					<div class="form-group">
						<label>Description</label>
						<textarea id="txtDescription" name="Description" rows="3" class="form-control"></textarea>
					</div>
					<div class="form-group">
						<label>Location</label>
						@Html.DropDownList("Location", Model.Locations, "Select a location", new { @class="form-control"})
					</div>
					<div class="form-group" style="margin-top: 10px">
						<button type="button" id="btnSave" class="btn btn-success" style="margin-right: 20px">Save</button>
						<button type="button" class="btn btn-default" id="CloseEditModelBtn" data-dismiss="savemodal">Close</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>
<

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/6.7.13/css/tempus-dominus.css" integrity="sha512-Has32s6AdZCytVnqS3BZc7JZ0PF1WJTNuPQAjGGzwrUa6i7vU9YgAyXm32qtrTP4dihoMaz/2AqPNTW9II5DOA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<!-- CSS -->
@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/6.7.13/js/tempus-dominus.js" integrity="sha512-xiyTM4u7V7zMP+2GA98z4IymIB00lNB7/Mpc6pYAauEM3A1kw4c2da3bu9AAO5E/7ncW+f1dsDO436kzFHP6dw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/6.7.13/js/jQuery-provider.js" integrity="sha512-v9/Iqm9WqLS2dbTEox5IdeF57vRDup2d0PeC31kJX2l1L1hI22K/ptbSinyzoFdAOUmPS0s6dDG5eE1eB0OqlQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

	<script>
		document.addEventListener('DOMContentLoaded', function () {

			var currentDate = new Date();
			//const datetimepicker1 = new tempusDominus.TempusDominus(document.getElementById('dtp1'));


			var selectedEvent = null;
			var eventLocation = null;

			var calendarEl = document.getElementById('calendar');
			var calendar = new FullCalendar.Calendar(calendarEl, {
				contentHeight: 700,
				initialView: 'dayGridMonth',
				events: @Html.Raw(ViewData["EventList"]),
				resources: @Html.Raw(ViewData["ResourceList"]),
				headerToolbar: {
					left: 'today prev,next',
					center: 'title',
					right: 'timeGridWeek,dayGridMonth,listMonth,resourceTimeGridDay'
				},
				validRange: {
					start: currentDate,
					end: '2100-12-31',
				},
				dayMaxEvents: true,
				eventClick: function (calEvent) {
					selectedEvent = calEvent.event;
					eventLocation = calEvent.event.extendedProps.locationName;
					$('#myModal #eventTitle').text(calEvent.event.title);
					var $description = $('<div/>');
					$description.append($('<p/>').html('<b>Start Time:</b>' + moment(calEvent.event.start).format('DD-MM-YYYY HH:mm A')));

					if (calEvent.event.end != null) {
						$description.append($('<p/>').html('<b>End Time:</b>' + moment(calEvent.event.end).format('DD-MM-YYYY HH:mm A')));
					}

					$description.append($('<p/>').html('<b>Event Description:</b>' + calEvent.event.extendedProps.description));
					$description.append($('<p/>').html('<b>Location:</b>' + calEvent.event.extendedProps.locationName));
					$('#myModal #pDetails').empty().html($description);
					$('#myModal').modal('show');
				},
				selectable: true,
				select: function (event) {
					selectedEvent = {
						id: 0,
						title: '',
						extendedProps: {
							description: '',
							locationName: '',
						},
						start: event.start,
						end: event.end,
						allDay: false,
					};
					openAddEditForm();
				},

			});
			calendar.render();


			$('#CloseEditModelBtn').click(function () {
				$('#myModalSave').modal('hide');
			})



			$('#btnDelete').click(function () {
				if (selectedEvent != null && confirm('Are you sure')) {
					$.ajax({
						type: 'POST',
						url: '/Event/DeleteEvent',
						data: {
							eventId: selectedEvent.id,
						},
						success: function (data) {
							if (data) {
								$('#myModal').modal('hide');
								$.ajax({
									type: 'GET',
									url: '/Home/MyCalendar',
									success: function (data) {
										location.reload();
									}
								});
							}
						},
						error: function () {
							alert('Failed');
						}
					});
				};
			});

			$('#btnEdit').click(function () {
				$('#myModalSave').modal('show');
				SelectedLocation(eventLocation);
				openAddEditForm();
			});


			function SelectedLocation(_location) {
				var _locations = document.getElementById('Location'), loc, i;

				for (var i = 0; i < _locations.length; i++) {
					loc = _locations[i];
					if (loc.innerText === _location) {
						loc.selected = "true";
					}
				}
			}

			$('#chkIsFullDay').change(function () {
				if ($('#chkIsFullDay').is(':checked')) {

					var _start = $('#txtStart').val();
					var _end = $('#txtEnd').val();

					console.log(_start);
					console.log(_end);

					var replaceStartTime = _start.replace('00:00 AM', '12:00 AM');
					var replaceEndTime = _end.replace('00:00 AM', '12:00 AM');



					$('#txtStart').val(replaceStartTime);
					$('#txtEnd').val(replaceEndTime);
					$("#txtStart").blur();
					$("#txtEnd").blur();
				}
				else {
					var _start = $('#txtStart').val();
					var _end = $('#txtEnd').val();
					var replaceStartTime = _start.replace('12:00 AM', '00:00 AM');
					var replaceEndTime = _end.replace('12:00 AM', '00:00 AM');
					$('#txtStart').val(replaceStartTime);
					$('#txtEnd').val(replaceEndTime);
				}
			});


			function openAddEditForm() {
				if (selectedEvent != null) {
					$('#hdEventID').val(selectedEvent.id);
					$('#txtSubject').val(selectedEvent.title);
					$('#txtStart').val(moment(selectedEvent.start).format('DD/MM/YYYY HH:mm A'));
					$('#chkIsFullDay').prop("checked", selectedEvent.allDay || false);
					$('#chkIsFullDay').change();
					$('#txtEnd').val(selectedEvent.end != null ? moment(selectedEvent.end).format('DD/MM/YYYY HH:mm A') : '');
					$('#txtDescription').val(selectedEvent.extendedProps.description);
				};
				$('#myModal').modal('hide');
				$('#myModalSave').modal('show');
			}

			$('#btnSave').click(function () {
				var isValid = true;
				//Validation/
				if ($('#txtSubject').val().trim() == "") {
					alert('Subject required');
					isValid = false;
					return;
				}
				if ($('#txtStart').val().trim() == "") {
					alert('Start date required');
					isValid = false;
					return;
				}
				if ($('#chkIsFullDay').is(':checked') == false && $('#txtEnd').val().trim() == "") {
					alert('End date required');
					isValid = false;
					return;
				}
				else {
					var startDate = moment($('#txtStart').val(), "DD/MM/YYYY HH:mm A").toDate();
					var endDate = moment($('#txtEnd').val(), "DD/MM/YYYY HH:mm A").toDate();
					if (startDate > endDate) {
						alert('Invalid end date');
						isValid = false;
						return;
					}
				}
				if (isValid) {
					var _form = document.getElementById('editForm');
					var formdata = new FormData(_form);
					var newDateTime = new Date();
					for (const [key, value] of formdata) {
						console.log(`${key}: ${value}\n`);
					}
					var type = 'update';
					SaveEvent(formdata);
				}

				// call function for submit data to the server
			})

			function SaveEvent(formdata) {
				$.ajax({
					url: "/Event/EditEvent",
					type: "POST",
					data: formdata,
					processData: false,
					contentType: false,
					success: function (response) {
						location.reload();
						alert("Success");
					},
					error: function (error) {
						// Handle any errors
					}
				});
			}

		});
	</script>
}


